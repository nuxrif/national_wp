/**
 * Created by Hasin Hayder on 7/17/14.
 */
;

function addPhoneticBangla() {
    if (jQuery("#qt_content_phonetic_bangla").val() == "English") {
        jQuery().bnKb.english();
        jQuery("#qt_content_phonetic_bangla").val("à¦¬à¦¾à¦‚à¦²à¦¾")
    } else {
        jQuery("#qt_content_phonetic_bangla").val("English");
        jQuery("#content").bnKb({
            switchkey: {
                webkit: "k",
                mozilla: "y",
                safari: "k",
                chrome: "k",
                msie: "y"
            },
            driver: phonetic
        })
    }
}
var phonetic = {
    keymaps: {
        j: "à¦•",
        0: "à§¦",
        1: "à§§",
        2: "à§¨",
        3: "à§©",
        4: "à§ª",
        5: "à§«",
        6: "à§¬",
        7: "à§­",
        8: "à§®",
        9: "à§¯",
        d: "à¦¿",
        gd: "à¦‡",
        D: "à§€",
        gD: "à¦ˆ",
        c: "à§‡",
        gc: "à¦",
        gs: "à¦‰",
        s: "à§",
        S: "à§‚",
        gS: "à¦Š",
        v: "à¦°",
        ga: "à¦‹",
        f: "à¦¾",
        gf: "à¦†",
        F: "à¦…",
        F: "à¦…",
        n: "à¦¸",
        t: "à¦Ÿ",
        J: "à¦–",
        J: "à¦–",
        b: "à¦¨",
        B: "à¦£",
        k: "à¦¤",
        K: "à¦¥",
        e: "à¦¡",
        E: "à¦¢",
        h: "à¦¬",
        H: "à¦­",
        H: "à¦­",
        eg: "à¦¡à¦¼",
        Eg: "à¦¢à¦¼",
        o: "à¦—",
        O: "à¦˜",
        O: "à¦˜",
        i: "à¦¹",
        I: "à¦ž",
        u: "à¦œ",
        U: "à¦",
        U: "à¦",
        y: "à¦š",
        Y: "à¦›",
        Y: "à¦›",
        T: "à¦ ",
        r: "à¦ª",
        R: "à¦«",
        R: "à¦«",
        l: "à¦¦",
        L: "à¦§",
        w: "à¦¯",
        wg: "à¦¯à¦¼",
        q: "à¦™",
        Q: "à¦‚",
        V: "à¦²",
        m: "à¦®",
        M: "à¦¶",
        N: "à¦·",
        gc: "à¦“",
        u: "à¦œ",
        gX: "à¦”",
        gX: "à¦”",
        gC: "à¦",
        gC: "à¦",
        tt: "à§Ž",
        H: "à¦ƒ",
        ".": "à¥¤",
        "..": ".",
        HH: "à§â€Œ",
        NN: "à¦",
        gw: "à§à¦¯",
        gh: "à§à¦¬",
        a: "à§ƒ",
        a: "à§ƒ",
        jgn: "à¦•à§à¦¸",
        vgw: "à¦°â€à§à¦¯",
        V: "à¦²",
        w: "à¦¯",
        r: "à¦ª",
        H: "à¦­",
        h: "à¦¬",
        m: "à¦®",
        jgn: "à¦•à§à¦¸",
        R: "à¦«",
        "+": "à§",
        "++": "+",
        o: "à§‹",
        oI: "à§ˆ",
        oU: "à§Œ"
    },
    supportIntellisense: true,
    intellisense: function (e, t) {
        var n = "aIiUuoiiouueEiEu";
        if (n.indexOf(t) != -1 && n.indexOf(e) != -1 || t == " " && n.indexOf(e) != -1) {
            carry = t + e;
            if (carry == "ii" || carry == "uu") newkeystring = e;
            else newkeystring = e.toUpperCase();
            newcarry = t + newkeystring;
            mods = {
                keystring: newkeystring,
                carry: newcarry
            };
            return mods
        }
        return false
    }
};
(function (e) {
    e.browser.chrome = /chrome/.test(navigator.userAgent.toLowerCase());
    var t;
    var n = 1;
    var r = 0;
    var i;
    var s = "";
    var o = "b";
    var u;
    var a = "y";
    e.fn.bnKb = function (n) {
        var r = {
            switchkey: {
                webkit: "k",
                mozilla: "y",
                safari: "k",
                chrome: "k",
                msie: "y"
            },
            driver: phonetic
        };
        t = e.extend(r, n);
        o = "b";
        u = "";
        e(this).unbind("keypress keydown keyup");
        e(this).keyup(e.fn.bnKb.ku);
        e(this).keydown(e.fn.bnKb.kd);
        e(this).keypress(e.fn.bnKb.kp);
        if (e.browser.chrome) a = t.switchkey.chrome;
        else if (e.browser.safari || e.browser.safari) a = t.switchkey.webkit;
        else if (e.browser.msie) a = t.switchkey.msie;
        else if (e.browser.mozilla) a = t.switchkey.mozilla
    };
    e.fn.bnKb.kp = function (n) {
        var r = n.which;
        var r = n.keyCode ? n.keyCode : n.which;
        var a = String.fromCharCode(r);
        if (o == "e") return true;
        if (i) e("#stat").html("Not Processing");
        else {
            var f = u;
            u += a;
            if (t.driver.supportIntellisense) {
                var l = t.driver.intellisense(a, f);
                if (l) {
                    a = l.keystring;
                    u = l.carry
                }
            }
            var c = t.driver.keymaps[u];
            if (c) {
                e.fn.bnKb.iac(this, c, 1);
                n.stopPropagation();
                return false
            }
            c = t.driver.keymaps[a];
            u = a;
            if (c) {
                e.fn.bnKb.iac(this, c, 0);
                n.stopPropagation();
                return false
            }
            s = "";
            return true
        }
    };
    e.fn.bnKb.kd = function (e) {
        var t = e.keyCode ? e.keyCode : e.which;
        var n = String.fromCharCode(t).toLowerCase();
        if (t == 17 || t == 224 || t == 91) {
            i = true
        }
        if (i && n == a) {
            o == "b" ? o = "e" : o = "b"
        }
    };
    e.fn.bnKb.ku = function (e) {
        var t = e.keyCode ? e.keyCode : e.which;
        if (t == 17 || t == 224 || t == 91) {
            i = false
        }
    };
    e.fn.bnKb.english = function () {
        o = "e"
    };
    e.fn.bnKb.bangla = function () {
        o = "b"
    };
    e.fn.bnKb.iac = function (e, t, n) {
        var r = e;
        var i = t;
        len = s.length;
        if (!n) len = 0;
        if (document.selection) {
            r.focus();
            sel = document.selection.createRange();
            if (r.value.length >= len) {
                sel.moveStart("character", -1 * len)
            }
            sel.text = i;
            sel.collapse(true);
            sel.select()
        } else {
            if (r.selectionStart || r.selectionStart == 0) {
                r.focus();
                var o = r.selectionStart - len;
                var u = r.selectionEnd;
                var a = r.scrollTop;
                o = o == -1 ? r.value.length : o;
                r.value = r.value.substring(0, o) + i + r.value.substring(u, r.value.length);
                r.focus();
                r.selectionStart = o + i.length;
                r.selectionEnd = o + i.length;
                r.scrollTop = a
            } else {
                var a = r.scrollTop;
                r.value += i;
                r.focus();
                r.scrollTop = a
            }
        }
        s = i
    }
})(jQuery);
QTags.addButton("phonetic_bangla", "à¦¬à¦¾à¦‚à¦²à¦¾", addPhoneticBangla);
